// Code generated by protoc-gen-go.
// source: fileserver/fileserver.proto
// DO NOT EDIT!

/*
Package fileserver is a generated protocol buffer package.

It is generated from these files:
	fileserver/fileserver.proto

It has these top-level messages:
	ServeResponse
	ServeRequest
	UnServeRequest
	ListServeRequest
	ListServeResponse
	ServedFile
*/
package fileserver

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ServeResponse struct {
	ServeResponse string `protobuf:"bytes,1,opt,name=ServeResponse,json=serveResponse" json:"ServeResponse,omitempty"`
	ServerPort    string `protobuf:"bytes,2,opt,name=ServerPort,json=serverPort" json:"ServerPort,omitempty"`
}

func (m *ServeResponse) Reset()                    { *m = ServeResponse{} }
func (m *ServeResponse) String() string            { return proto.CompactTextString(m) }
func (*ServeResponse) ProtoMessage()               {}
func (*ServeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ServeResponse) GetServeResponse() string {
	if m != nil {
		return m.ServeResponse
	}
	return ""
}

func (m *ServeResponse) GetServerPort() string {
	if m != nil {
		return m.ServerPort
	}
	return ""
}

type ServeRequest struct {
	Uuid     string `protobuf:"bytes,1,opt,name=Uuid,json=uuid" json:"Uuid,omitempty"`
	Pool     string `protobuf:"bytes,2,opt,name=Pool,json=pool" json:"Pool,omitempty"`
	FilePath string `protobuf:"bytes,3,opt,name=FilePath,json=filePath" json:"FilePath,omitempty"`
	FileData []byte `protobuf:"bytes,4,opt,name=FileData,json=fileData,proto3" json:"FileData,omitempty"`
	Timeout  int32  `protobuf:"varint,5,opt,name=Timeout,json=timeout" json:"Timeout,omitempty"`
	Limit    int32  `protobuf:"varint,6,opt,name=Limit,json=limit" json:"Limit,omitempty"`
}

func (m *ServeRequest) Reset()                    { *m = ServeRequest{} }
func (m *ServeRequest) String() string            { return proto.CompactTextString(m) }
func (*ServeRequest) ProtoMessage()               {}
func (*ServeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ServeRequest) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *ServeRequest) GetPool() string {
	if m != nil {
		return m.Pool
	}
	return ""
}

func (m *ServeRequest) GetFilePath() string {
	if m != nil {
		return m.FilePath
	}
	return ""
}

func (m *ServeRequest) GetFileData() []byte {
	if m != nil {
		return m.FileData
	}
	return nil
}

func (m *ServeRequest) GetTimeout() int32 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *ServeRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type UnServeRequest struct {
	Uuid     string `protobuf:"bytes,1,opt,name=Uuid,json=uuid" json:"Uuid,omitempty"`
	Pool     string `protobuf:"bytes,2,opt,name=Pool,json=pool" json:"Pool,omitempty"`
	FilePath string `protobuf:"bytes,3,opt,name=FilePath,json=filePath" json:"FilePath,omitempty"`
}

func (m *UnServeRequest) Reset()                    { *m = UnServeRequest{} }
func (m *UnServeRequest) String() string            { return proto.CompactTextString(m) }
func (*UnServeRequest) ProtoMessage()               {}
func (*UnServeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *UnServeRequest) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *UnServeRequest) GetPool() string {
	if m != nil {
		return m.Pool
	}
	return ""
}

func (m *UnServeRequest) GetFilePath() string {
	if m != nil {
		return m.FilePath
	}
	return ""
}

type ListServeRequest struct {
	Uuid string `protobuf:"bytes,1,opt,name=Uuid,json=uuid" json:"Uuid,omitempty"`
	Pool string `protobuf:"bytes,2,opt,name=Pool,json=pool" json:"Pool,omitempty"`
}

func (m *ListServeRequest) Reset()                    { *m = ListServeRequest{} }
func (m *ListServeRequest) String() string            { return proto.CompactTextString(m) }
func (*ListServeRequest) ProtoMessage()               {}
func (*ListServeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ListServeRequest) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *ListServeRequest) GetPool() string {
	if m != nil {
		return m.Pool
	}
	return ""
}

type ListServeResponse struct {
	ServedFiles []*ServedFile `protobuf:"bytes,1,rep,name=ServedFiles,json=servedFiles" json:"ServedFiles,omitempty"`
}

func (m *ListServeResponse) Reset()                    { *m = ListServeResponse{} }
func (m *ListServeResponse) String() string            { return proto.CompactTextString(m) }
func (*ListServeResponse) ProtoMessage()               {}
func (*ListServeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ListServeResponse) GetServedFiles() []*ServedFile {
	if m != nil {
		return m.ServedFiles
	}
	return nil
}

type ServedFile struct {
	FilePath       string `protobuf:"bytes,1,opt,name=FilePath,json=filePath" json:"FilePath,omitempty"`
	FileHash       string `protobuf:"bytes,2,opt,name=FileHash,json=fileHash" json:"FileHash,omitempty"`
	AccessLimit    int32  `protobuf:"varint,3,opt,name=AccessLimit,json=accessLimit" json:"AccessLimit,omitempty"`
	ExpirationTime string `protobuf:"bytes,4,opt,name=ExpirationTime,json=expirationTime" json:"ExpirationTime,omitempty"`
}

func (m *ServedFile) Reset()                    { *m = ServedFile{} }
func (m *ServedFile) String() string            { return proto.CompactTextString(m) }
func (*ServedFile) ProtoMessage()               {}
func (*ServedFile) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ServedFile) GetFilePath() string {
	if m != nil {
		return m.FilePath
	}
	return ""
}

func (m *ServedFile) GetFileHash() string {
	if m != nil {
		return m.FileHash
	}
	return ""
}

func (m *ServedFile) GetAccessLimit() int32 {
	if m != nil {
		return m.AccessLimit
	}
	return 0
}

func (m *ServedFile) GetExpirationTime() string {
	if m != nil {
		return m.ExpirationTime
	}
	return ""
}

func init() {
	proto.RegisterType((*ServeResponse)(nil), "fileserver.ServeResponse")
	proto.RegisterType((*ServeRequest)(nil), "fileserver.ServeRequest")
	proto.RegisterType((*UnServeRequest)(nil), "fileserver.UnServeRequest")
	proto.RegisterType((*ListServeRequest)(nil), "fileserver.ListServeRequest")
	proto.RegisterType((*ListServeResponse)(nil), "fileserver.ListServeResponse")
	proto.RegisterType((*ServedFile)(nil), "fileserver.ServedFile")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Fileserver service

type FileserverClient interface {
	// File Server Calls
	ServeFile(ctx context.Context, in *ServeRequest, opts ...grpc.CallOption) (*ServeResponse, error)
	UnServeFile(ctx context.Context, in *UnServeRequest, opts ...grpc.CallOption) (*ServeResponse, error)
	ListServer(ctx context.Context, in *ListServeRequest, opts ...grpc.CallOption) (*ListServeResponse, error)
}

type fileserverClient struct {
	cc *grpc.ClientConn
}

func NewFileserverClient(cc *grpc.ClientConn) FileserverClient {
	return &fileserverClient{cc}
}

func (c *fileserverClient) ServeFile(ctx context.Context, in *ServeRequest, opts ...grpc.CallOption) (*ServeResponse, error) {
	out := new(ServeResponse)
	err := grpc.Invoke(ctx, "/fileserver.Fileserver/ServeFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileserverClient) UnServeFile(ctx context.Context, in *UnServeRequest, opts ...grpc.CallOption) (*ServeResponse, error) {
	out := new(ServeResponse)
	err := grpc.Invoke(ctx, "/fileserver.Fileserver/UnServeFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileserverClient) ListServer(ctx context.Context, in *ListServeRequest, opts ...grpc.CallOption) (*ListServeResponse, error) {
	out := new(ListServeResponse)
	err := grpc.Invoke(ctx, "/fileserver.Fileserver/ListServer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Fileserver service

type FileserverServer interface {
	// File Server Calls
	ServeFile(context.Context, *ServeRequest) (*ServeResponse, error)
	UnServeFile(context.Context, *UnServeRequest) (*ServeResponse, error)
	ListServer(context.Context, *ListServeRequest) (*ListServeResponse, error)
}

func RegisterFileserverServer(s *grpc.Server, srv FileserverServer) {
	s.RegisterService(&_Fileserver_serviceDesc, srv)
}

func _Fileserver_ServeFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileserverServer).ServeFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fileserver.Fileserver/ServeFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileserverServer).ServeFile(ctx, req.(*ServeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fileserver_UnServeFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnServeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileserverServer).UnServeFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fileserver.Fileserver/UnServeFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileserverServer).UnServeFile(ctx, req.(*UnServeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fileserver_ListServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileserverServer).ListServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fileserver.Fileserver/ListServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileserverServer).ListServer(ctx, req.(*ListServeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Fileserver_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fileserver.Fileserver",
	HandlerType: (*FileserverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ServeFile",
			Handler:    _Fileserver_ServeFile_Handler,
		},
		{
			MethodName: "UnServeFile",
			Handler:    _Fileserver_UnServeFile_Handler,
		},
		{
			MethodName: "ListServer",
			Handler:    _Fileserver_ListServer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fileserver/fileserver.proto",
}

func init() { proto.RegisterFile("fileserver/fileserver.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 386 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x53, 0xdd, 0x4a, 0xeb, 0x40,
	0x18, 0x3c, 0x7b, 0x9a, 0xf4, 0xe7, 0x4b, 0x5b, 0xce, 0x59, 0x44, 0xd6, 0xfa, 0x43, 0x08, 0x22,
	0xb9, 0xaa, 0x50, 0x6f, 0xc4, 0x3b, 0x45, 0x8b, 0x60, 0x85, 0x12, 0xdb, 0x07, 0x88, 0xed, 0x96,
	0x2e, 0xa4, 0xdd, 0x98, 0xdd, 0x88, 0x4f, 0xe1, 0x23, 0xf8, 0x76, 0xbe, 0x87, 0xec, 0x66, 0xdb,
	0x24, 0xb5, 0x7a, 0x21, 0xde, 0xed, 0x37, 0x33, 0xfb, 0x65, 0x76, 0x86, 0xc0, 0xfe, 0x8c, 0x45,
	0x54, 0xd0, 0xe4, 0x99, 0x26, 0xa7, 0xf9, 0xb1, 0x1b, 0x27, 0x5c, 0x72, 0x0c, 0x39, 0xe2, 0x8d,
	0xa1, 0xf5, 0xa0, 0x4e, 0x01, 0x15, 0x31, 0x5f, 0x0a, 0x8a, 0x8f, 0x37, 0x00, 0x82, 0x5c, 0xe4,
	0x37, 0x82, 0x96, 0x28, 0xa9, 0x8e, 0x00, 0xb4, 0x2a, 0x19, 0xf2, 0x44, 0x92, 0xbf, 0x5a, 0x02,
	0x62, 0x8d, 0x78, 0x6f, 0x08, 0x9a, 0x66, 0xcd, 0x53, 0x4a, 0x85, 0xc4, 0x18, 0xac, 0x71, 0xca,
	0xa6, 0x66, 0x9b, 0x95, 0xa6, 0x6c, 0xaa, 0xb0, 0x21, 0xe7, 0x91, 0xb9, 0x6e, 0xc5, 0x9c, 0x47,
	0xb8, 0x03, 0xf5, 0x3e, 0x8b, 0xe8, 0x30, 0x94, 0x73, 0x52, 0xd1, 0x78, 0x7d, 0x66, 0xe6, 0x15,
	0x77, 0x1d, 0xca, 0x90, 0x58, 0x2e, 0xf2, 0x9b, 0x19, 0xa7, 0x66, 0x4c, 0xa0, 0x36, 0x62, 0x0b,
	0xca, 0x53, 0x49, 0x6c, 0x17, 0xf9, 0x76, 0x50, 0x93, 0xd9, 0x88, 0x77, 0xc0, 0x1e, 0xb0, 0x05,
	0x93, 0xa4, 0xaa, 0x71, 0x3b, 0x52, 0x83, 0x37, 0x82, 0xf6, 0x78, 0xf9, 0xdb, 0x0e, 0xbd, 0x0b,
	0xf8, 0x37, 0x60, 0x42, 0xfe, 0x64, 0xaf, 0x77, 0x0f, 0xff, 0x0b, 0x77, 0x4d, 0xce, 0xe7, 0xe0,
	0x68, 0x60, 0xaa, 0x3e, 0x29, 0x08, 0x72, 0x2b, 0xbe, 0xd3, 0xdb, 0xed, 0x16, 0x2a, 0xcd, 0xe9,
	0xc0, 0x11, 0xb9, 0xd4, 0x7b, 0x45, 0xa6, 0x22, 0x3d, 0x97, 0x5c, 0xa3, 0xed, 0xb9, 0xde, 0x86,
	0x62, 0x6e, 0x1c, 0x69, 0x4e, 0xcd, 0xd8, 0x05, 0xe7, 0x72, 0x32, 0xa1, 0x42, 0x64, 0x19, 0x56,
	0x74, 0x86, 0x4e, 0x98, 0x43, 0xf8, 0x04, 0xda, 0x37, 0x2f, 0x31, 0x4b, 0x42, 0xc9, 0xf8, 0x52,
	0x75, 0xa0, 0xbb, 0x69, 0x04, 0x6d, 0x5a, 0x42, 0x7b, 0xef, 0x08, 0xa0, 0xbf, 0xf6, 0x8d, 0xaf,
	0xa0, 0xa1, 0xed, 0x69, 0x77, 0xe4, 0xd3, 0x8b, 0x4c, 0x7a, 0x9d, 0xbd, 0x2d, 0x4c, 0x96, 0x8d,
	0xf7, 0x07, 0xf7, 0xc1, 0x31, 0x25, 0x66, 0x6f, 0x2c, 0x6a, 0xcb, 0xed, 0x7e, 0xbf, 0xe7, 0x0e,
	0x60, 0x1d, 0x7d, 0x82, 0x0f, 0x8a, 0xd2, 0xcd, 0x3a, 0x3b, 0x87, 0x5f, 0xb0, 0xab, 0x65, 0x8f,
	0x55, 0xfd, 0x93, 0x9d, 0x7d, 0x04, 0x00, 0x00, 0xff, 0xff, 0x5a, 0x86, 0x1d, 0x05, 0x83, 0x03,
	0x00, 0x00,
}
